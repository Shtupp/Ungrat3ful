#include <iostream>
#include <SDL.h>
#include <SDL_image.h>
#include <SDL_main.h>
#include <vector>
#include <array>
#include <unordered_set>
#include <boost/functional/hash.hpp>

SDL_Window* window;
SDL_Renderer* renderer;
SDL_Texture* testTile;
SDL_Texture* activeTile;
SDL_Texture* plaOnePNG;
SDL_Event event;
bool isRunning = true;
int cursorX;
int cursorY;
std::array<int, 2> activePos;

int plaOneX = 30;
int plaOneY = 3;
int playerX = 320; // Initial X position
int playerY = 240; // Initial Y position

int winInitWidth = 850;
int winInitHeight = 600;

int numCols;
int numRows;

//prototype functions here for scoping 
void RenderTileMap(SDL_Renderer* renderer, SDL_Texture* tileset, int tileWidth, int** tilemap);

// Function to modify an object's x and y coordinates
void transformObj(int x, int y, int& objX, int& objY) {
    objX += x;
    objY += y;
}

// https://www.redblobgames.com/grids/hexagons/implementation.html#hex
// the int w parameter is used to distinguish between positions and vectors. Not useful yet but worth keeping around
template <typename Number, int w>
struct Hex {
    union {
        const Number v[3];
        struct { const Number q, r, s; };
    };

    Hex(Number q_, Number r_) : v{q_, r_, -q_ - r_} {}
    Hex(Number q_, Number r_, Number s_) : v{q_, r_, s_} {}
};

struct HexHash {
    std::size_t operator()(const Hex<int, 1>& hex) const {
        std::size_t seed = 0;
        // Combine the hashes of q, r, and s using a hash combining function
        boost::hash_combine(seed, hex.q);
        boost::hash_combine(seed, hex.r);
        boost::hash_combine(seed, hex.s);
        return seed;
    }
};

// should be in the file's header but oh well
std::unordered_set<Hex<int, 1>, HexHash> mapArr;

// https://www.redblobgames.com/grids/hexagons/implementation.html#hex-arithmetic
Hex<int, 1> hex_subtract(Hex<int, 1> a, Hex<int, 1> b) {
    return Hex<int, 1>(a.q - b.q, a.r - b.r, a.s - b.s);
}

// https://www.redblobgames.com/grids/hexagons/implementation.html#hex-distance
int hex_length(Hex<int, 1> hex) {
    return int((abs(hex.q) + abs(hex.r) + abs(hex.s)) / 2);
}

int hex_distance(Hex<int, 1> a, Hex<int, 1> b) {
    return hex_length(hex_subtract(a, b));
}

// https://www.redblobgames.com/grids/hexagons/implementation.html#layout
struct Orientation {
    const double f0, f1, f2, f3;
    const double b0, b1, b2, b3;
    const double start_angle; // in multiples of 60Â°
    Orientation(double f0_, double f1_, double f2_, double f3_,
                double b0_, double b1_, double b2_, double b3_,
                double start_angle_)
    : f0(f0_), f1(f1_), f2(f2_), f3(f3_),
      b0(b0_), b1(b1_), b2(b2_), b3(b3_),
      start_angle(start_angle_) {}
};

// layout_flat makes sense for our art rendering on top of tiles but might as well include both
const Orientation layout_pointy
  = Orientation(sqrt(3.0), sqrt(3.0) / 2.0, 0.0, 3.0 / 2.0,
                sqrt(3.0) / 3.0, -1.0 / 3.0, 0.0, 2.0 / 3.0,
                0.5);
const Orientation layout_flat
  = Orientation(3.0 / 2.0, 0.0, sqrt(3.0) / 2.0, sqrt(3.0),
                2.0 / 3.0, 0.0, -1.0 / 3.0, sqrt(3.0) / 3.0,
                0.0);

struct Point {
    const double x, y;
    Point(double x_, double y_): x(x_), y(y_) {}
};

struct Layout {
    const Orientation orientation;
    const Point size;
    const Point origin;
    Layout(Orientation orientation_, Point size_, Point origin_)
    : orientation(orientation_), size(size_), origin(origin_) {}
};

// https://www.redblobgames.com/grids/hexagons/implementation.html#hex-to-pixel
Point hex_to_pixel(Layout layout, Hex<int, 1> h) {
    const Orientation& M = layout.orientation;
    double x = (M.f0 * h.q + M.f1 * h.r) * layout.size.x;
    double y = (M.f2 * h.q + M.f3 * h.r) * layout.size.y;
    return Point(x + layout.origin.x, y + layout.origin.y);
}

// https://www.redblobgames.com/grids/hexagons/implementation.html#pixel-to-hex
Hex<double, 1> pixel_to_hex(Layout layout, Point p) {
    const Orientation& M = layout.orientation;
    Point pt = Point((p.x - layout.origin.x) / layout.size.x,
                     (p.y - layout.origin.y) / layout.size.y);
    double q = M.b0 * pt.x + M.b1 * pt.y;
    double r = M.b2 * pt.x + M.b3 * pt.y;
    return Hex<double, 1>(q, r, -q - r);
}

// https://www.redblobgames.com/grids/hexagons/implementation.html#rounding
Hex<int, 1> hex_round(Hex<double, 1> h) {
    int q = int(round(h.q));
    int r = int(round(h.r));
    int s = int(round(h.s));
    double q_diff = abs(q - h.q);
    double r_diff = abs(r - h.r);
    double s_diff = abs(s - h.s);
    if (q_diff > r_diff and q_diff > s_diff) {
        q = -r - s;
    } else if (r_diff > s_diff) {
        r = -q - s;
    } else {
        s = -q - r;
    }
    return Hex<int, 1>(q, r, s);
}

//map storage www.redblobgames.com/grids/hexagons/implementation.html#map-storage
namespace std {
    template <> struct hash<Hex<int, 1>> {
        size_t operator()(const Hex<int, 1>& h) const {
            hash<int> int_hash;
            size_t hq = int_hash(h.q);
            size_t hr = int_hash(h.r);
            return hq ^ (hr + 0x9e3779b9 + (hq << 6) + (hq >> 2));
        }
    };
}

// Function for efficiently moving an npc object a given amount of tiles toward a specific point
void moveNPC(int objX, int objY, int tgtX, int tgtY, int tiles) {

    for (int i = 0; i <= tiles; i++) {
        if ((abs(tgtX - objX) < 75) && (abs(objY - tgtY) < 50)) {
            //Exit the loop early if the object has already reached the destination
            i += tiles;
        }
        else {
            //This detection for direction is currently using the same method for determining the center of the hexagon as the player movement in HandleMousClick
            //(adding 47 to the y value of the object and 20 to the x value of the object)
            //This is because of the manner in which the standard human png is positioned on the hexagon, and may need be updated later to account for other objects
            if ((tgtY > objY + 47) && (abs(tgtX - objX) < 50))
                transformObj(0, 100, objX, objY);
            else if ((tgtY < objY + 47) && (abs(tgtX - objX) < 50))
                transformObj(0, -100, objX, objY);
            else if ((tgtY > objY + 47) && (tgtX > objX + 20))
                transformObj(75, 50, objX, objY);
            else if ((tgtY < objY + 47) && (tgtX > objX + 20))
                transformObj(75, -50, objX, objY);
            else if ((tgtY < objY + 47) && (tgtX < objX + 20))
                transformObj(-75, -50, objX, objY);
            else if ((tgtY > objY + 47) && (tgtX < objX + 20))
                transformObj(-75, 50, objX, objY);
        }
    }

}

void HandleMouseClick() {
    // Move the character to the adjacent tile in the clicked direction.
    if ((cursorY > plaOneY + 47) && (abs(cursorX - plaOneX) < 50))
        transformObj(0, 100, plaOneX, plaOneY);
    else if ((cursorY < plaOneY + 47) && (abs(cursorX - plaOneX) < 50))
        transformObj(0, -100, plaOneX, plaOneY);
    else if ((cursorY > plaOneY + 47) && (cursorX > plaOneX + 20))
        transformObj(75, 50, plaOneX, plaOneY);
    else if ((cursorY < plaOneY + 47) && (cursorX > plaOneX + 20))
        transformObj(75, -50, plaOneX, plaOneY);
    else if ((cursorY < plaOneY + 47) && (cursorX < plaOneX + 20))
        transformObj(-75, -50, plaOneX, plaOneY);
    else if ((cursorY > plaOneY + 47) && (cursorX < plaOneX + 20))
        transformObj(-75, 50, plaOneX, plaOneY);
}

void detectCursorTile() {
    // Adjust for the hexagonal grid layout.
    float tileWidth = 100.0f;  // Hexagonal tiles are typically 1.5 times as wide as they are tall.
    float tileHeight = 100.0f; // Height is the square root of 3 times the width.

    // Adjust the cursor position.
    //destRect = { x * tileWidth + (x * (tileWidth / 2)) + ((tileWidth / 4) * 3), y * tileWidth - (y * (tileWidth / 2)), tileWidth, tileWidth };
    //float adjustedCursorX = ((cursorX / tileWidth) + (cursorX/(tileWidth/2))); 

    float adjustedCursorX = cursorX / tileWidth;
    float adjustedCursorY = cursorY / tileHeight;

    // Calculate the row and column.
    int column = static_cast<int>(adjustedCursorX);
    int row = static_cast<int>(adjustedCursorY);

    // Adjust the column for odd rows.
    //if (row % 2 == 1) {
    //    column -= 1;
    //}

    // Determine if the cursor is in a valid hexagon.
    if (cursorX >= 0 && cursorY >= 0 && adjustedCursorX - column <= 1 && adjustedCursorY - row <= 1) {
        //(row%2==0) ? activePos[1] = row : activePos[1] = row - 2;
        activePos[1] = row;
        (column % 2 == 1) ? activePos[0] = column : activePos[0] = column - 2;
        std::cout << "column: " << activePos[0] << std::endl;
        std::cout << "row: " << activePos[1] << std::endl;

    }
}

void handleInput() {
    int newMouseX, newMouseY;
    SDL_GetMouseState(&newMouseX, &newMouseY);
    if (cursorX != newMouseX || cursorY != newMouseY) {
        cursorX = newMouseX;
        cursorY = newMouseY;
        detectCursorTile();
    }
    while (SDL_PollEvent(&event)) {
        if (event.type == SDL_QUIT) {
            isRunning = false;
        }
        if (event.type == SDL_MOUSEBUTTONDOWN && event.button.button == SDL_BUTTON_LEFT) {
            HandleMouseClick();
        }
        if (event.type == SDL_KEYDOWN) {
            switch (event.key.keysym.sym) {
            case SDLK_w:
                // Move up
                playerY -= 10;
                break;
            case SDLK_a:
                // Move left
                playerX -= 10;
                break;
            case SDLK_s:
                // Move down
                playerY += 10;
                break;
            case SDLK_d:
                // Move right
                playerX += 10;
                break;
            default:
                break;
            }
        }
    }
}

SDL_Texture* LoadImageAsTexture(const char* imagePath) {
    // Load the image from the provided file path
    SDL_Surface* imageSurface = IMG_Load(imagePath);

    if (imageSurface == nullptr) {
        SDL_Log("Failed to load image from path. Check spelling. SDL_Error: %s\n", IMG_GetError());
        throw 1;
    }

    // Create a texture from the loaded image
    SDL_Texture* imageTexture = SDL_CreateTextureFromSurface(renderer, imageSurface);
    SDL_FreeSurface(imageSurface);

    if (imageTexture == nullptr) {
        SDL_Log("Failed to create texture from image. SDL_Error: %s\n", SDL_GetError());
        throw 1;
    }

    return imageTexture;
}
void RenderTileMap(SDL_Renderer* renderer, SDL_Texture* tileset, int tileWidth, unordered_set<Hex<int,1>> tileMap) {
    SDL_Rect destRect;

    for (Hex<int,1> tile : tileMap) {
        Point p = hex_to_pixel(Layout(layout_flat, Point(100,100), Point(0,0)), tile);
        destRect = {p.x, p.y, 100, 100}
        SDL_RenderCopy(renderer, tileset, nullptr, &destRect);
    }
}

void render() {
    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    SDL_RenderClear(renderer);

    //rendering the map. I suspect this is inefficient. need to find how to just render "statically" 
    if (testTile != nullptr) {
        //SDL_RenderCopy(renderer, testTile, nullptr, nullptr);
        RenderTileMap(renderer, testTile, 100, mapArr);
    }

    SDL_Rect plaOneDest = { plaOneX, plaOneY, 41, 94 };
    SDL_RenderCopy(renderer, plaOnePNG, nullptr, &plaOneDest);

    // just playing with moving things around on the screen
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderDrawLine(renderer, playerX, playerY, playerX + 50, playerY);

    // Draw other elements here.
    SDL_RenderPresent(renderer);
}

    //int mapHeight = sizeof(tileMap) / sizeof(tileMap[0]);
    //int mapWidth = sizeof(tileMap[0]) / sizeof(tileMap[0][0]);

//    int mapHeight = winHeight / tileDem;
//    int mapWidth = winWidth / tileDem;
//    // Iterate through the tileMap
//    for (int y = 0; y < mapHeight; ++y) {
//        //int rowLen = (y % 2 == 1) ? numRows - 2 : numRows;
//        for (int x = 0; x < mapWidth; ++x) {
//            // Calculate the source and destination rectangles for the current tile
//            if (y % 2 == 0) {
//                destRect = { x * tileWidth + (x * (tileWidth / 2)), y * (tileWidth / 2), tileWidth, tileWidth };
//            }
//            else {
//                destRect = { x * tileWidth + (x * (tileWidth / 2)) + ((tileWidth / 4) * 3), y * tileWidth - (y * (tileWidth / 2)), tileWidth, tileWidth };
//            }
//            // Render the tile
//            SDL_RenderCopy(renderer, tileset, nullptr, &destRect);
//            if (x == activePos[0] && y == activePos[1]) SDL_RenderCopy(renderer, activeTile, nullptr, &destRect);
//        }
//    }


//here we initialize the mapArr var using dynamic memory allocation
//POTENTIAL FOR MEMORY LEAKS BE CAREFUL
std::unordered_set<Hex<int, 1>> initMapSet(int winWidth, int winHeight, int tileDem) {
    std::unordered_set<Hex<int, 1>> map;
    //int** tessa;
    numRows = winHeight / tileDem;
    numCols = (winWidth / tileDem);

    std::cout << "Number of rows: " << numRows << std::endl;
    std::cout << "Number of columns: " << numCols << std::endl;

    // Allocate memory for the array (my baby tessa).
    //tessa = new int* [numRows];
    //for (int i = 0; i < numRows; i++) {
    //    tessa[i] = new int[numCols];
    //}

    // Initialize the array.
    for (int i = 0; i < numRows; i++) {
        int oddRowOffset = floor(i/2.0);
        std::cout << "oddRowOffset: " << oddRowOffset << std::endl;
        for (int j = 0; j < numCols - oddRowOffset; j++) {
            map.insert(Hex<int, 1>(i,j,-i-j));
        }
    }

    return map;
}

int main(int argc, char* argv[]) {
    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        SDL_Log("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
        return 1;
    }

    // Create a window
    SDL_Window* window = SDL_CreateWindow("hexagonal tesselation",
        SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, winInitWidth, winInitHeight, 0);

    if (!window) {
        SDL_Log("Window could not be created! SDL_Error: %s\n", SDL_GetError());
        return 1;
    }

    // initialize the renderer variable (already declared globally)
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    //the mapArr var is initialized here so it can be used to draw the map
    mapSet = initMapSet(winInitWidth, winInitHeight, 100);
    //Point origin = Point(0,0);
    //Point size = Point(100,100)
    Layout(layout_flat, Point(100,100), Point(0,0))


    testTile = LoadImageAsTexture("assets/tile-test.png");
    plaOnePNG = LoadImageAsTexture("assets/ancp-male-test.png");
    activeTile = LoadImageAsTexture("assets/active-tile-test.png");

    if (!renderer) {
        SDL_Log("Renderer could not be created! SDL_Error: %s\n", SDL_GetError());
        return 1;
    }

    while (isRunning) {
        handleInput();
        render();
    }
    //std::cout << "checkpoint";

    // Cleanup and quit
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    // Don't forget to deallocate the memory when you're done.
    for (int i = 0; i < winInitHeight / 100; i++) {
        delete[] mapArr[i];
    }
    delete[] mapArr;

    return 0;
}
